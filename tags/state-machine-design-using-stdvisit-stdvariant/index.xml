<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>State-Machine-Design-Using-Stdvisit-Stdvariant on Vishal Chovatiya</title>
    <link>https://vishalchovatiya.github.io/tags/state-machine-design-using-stdvisit-stdvariant/</link>
    <description>Recent content in State-Machine-Design-Using-Stdvisit-Stdvariant on Vishal Chovatiya</description>
    <image>
      <title>Vishal Chovatiya</title>
      <url>https://vishalchovatiya.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://vishalchovatiya.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.128.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 Apr 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://vishalchovatiya.github.io/tags/state-machine-design-using-stdvisit-stdvariant/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>State Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/state-design-pattern-in-modern-cpp/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/state-design-pattern-in-modern-cpp/</guid>
      <description>A State Design Pattern is a type of Behavioural Design Pattern that defines objects behaviour(defined as a state) based on some event happens. And that can be the internal or external event. For example, if you design an ATM machine using the State Design Pattern, the external event could be someone inserted debit/credit card &amp;amp; internal event could be a user timeout. So in nutshell, the State Design Pattern in Modern C++ is a systematic way to implement certain behaviour on a particular event considering the context.</description>
    </item>
  </channel>
</rss>
