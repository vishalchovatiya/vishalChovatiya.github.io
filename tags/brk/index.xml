<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Brk on Vishal Chovatiya</title>
    <link>http://localhost:1313/tags/brk/</link>
    <description>Recent content in Brk on Vishal Chovatiya</description>
    <image>
      <title>Vishal Chovatiya</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.128.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 08 Oct 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/brk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How Do malloc &amp; free Work in C!</title>
      <link>http://localhost:1313/posts/how-do-malloc-free-work-in-c/</link>
      <pubDate>Sat, 08 Oct 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/how-do-malloc-free-work-in-c/</guid>
      <description>As we know, the process can allocate &amp;amp; deallocate memory using malloc &amp;amp; free in C language. But do you ever consider what happens behind the scene ? or How do malloc &amp;amp; free work? Let see
Allocating Memory on the Heap A process can allocate memory by increasing the size of the heap.
Heap is a variable-size segment of contiguous virtual memory that begins just after the uninitialized data segment of a process and grows &amp;amp; shrinks as memory allocated and freed.</description>
    </item>
  </channel>
</rss>
