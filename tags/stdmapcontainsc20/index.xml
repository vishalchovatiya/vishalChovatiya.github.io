<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Stdmapcontainsc20 on Vishal Chovatiya</title>
    <link>https://vishalchovatiya.github.io/tags/stdmapcontainsc20/</link>
    <description>Recent content in Stdmapcontainsc20 on Vishal Chovatiya</description>
    <image>
      <title>Vishal Chovatiya</title>
      <url>https://vishalchovatiya.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://vishalchovatiya.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.128.0</generator>
    <language>en</language>
    <lastBuildDate>Wed, 08 Jul 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://vishalchovatiya.github.io/tags/stdmapcontainsc20/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using std::map Wisely With Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/using-std-map-wisely-with-modern-cpp/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/using-std-map-wisely-with-modern-cpp/</guid>
      <description>std::map and its siblings(std::multimap, std::unordered_map/multimap) used to be my favourite containers when I was doing competitive programming. In fact, I still like them(though using less frequently nowadays). And with Modern C++, we now have more reasons to use std::map. That&amp;rsquo;s why I have decided to address this topic by writing an article summarizing these new features. So, without much gibberish, let&amp;rsquo;s dive-in directly.
std::map::contains(C++20) std::map::contains member function is a good step towards code expressiveness.</description>
    </item>
  </channel>
</rss>
