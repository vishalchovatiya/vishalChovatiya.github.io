<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>System-Call on Vishal Chovatiya</title>
    <link>http://localhost:1313/tags/system-call/</link>
    <description>Recent content in System-Call on Vishal Chovatiya</description>
    <image>
      <title>Vishal Chovatiya</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.128.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 10 Sep 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/system-call/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clone system call example</title>
      <link>http://localhost:1313/posts/clone-system-call-example/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/clone-system-call-example/</guid>
      <description>This is a quick article on Clone system call example without talking shit. So let&amp;rsquo;s see some pointers for the same :
clone() creates a new process, in a manner similar to fork. It is actually a library function layered on top of the underlying clone()system call. Unlike fork , these calls allow the child process to share parts of its execution context with the calling process, such as the memory space, the table of file descriptors, and the table of signal handlers.</description>
    </item>
    <item>
      <title>Dealing with Multiple file descriptor : poll() system call</title>
      <link>http://localhost:1313/posts/dealing-with-multiple-file-descriptor-poll-system-call/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/dealing-with-multiple-file-descriptor-poll-system-call/</guid>
      <description>Why use poll()? Suppose you have to deal with multiple clients connected at the same time. A natural question, then, is: how can you read from multiple file descriptors (sockets) at once? Do you need to make some really annoyingly multi-threaded code to handle each client that&amp;rsquo;s connected? Do you have to go into some stupid loop constantly checking each socket to see if data&amp;rsquo;s available? You can resolve this issue efficiently by polling file descriptor(Sockets here).</description>
    </item>
  </channel>
</rss>
