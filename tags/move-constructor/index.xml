<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Move-Constructor on Vishal Chovatiya</title>
    <link>http://localhost:1313/tags/move-constructor/</link>
    <description>Recent content in Move-Constructor on Vishal Chovatiya</description>
    <image>
      <title>Vishal Chovatiya</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.128.0</generator>
    <language>en</language>
    <lastBuildDate>Sun, 15 Sep 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/move-constructor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lvalue Rvalue and Their References With Example in C&#43;&#43;</title>
      <link>http://localhost:1313/posts/lvalue-rvalue-and-their-references-with-example-in-cpp/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/lvalue-rvalue-and-their-references-with-example-in-cpp/</guid>
      <description>This topic might be a piece of cake for every experienced C++ veteran. But I remember back in the days when I was a novice &amp;amp; introducing myself with Modern C++, I was really irritated by C++ compiler messages saying this is lvalue &amp;amp; that is rvalue kind of jargons. And even if you are not using C++, you may have faced compiler error in C language saying &amp;ldquo;lvalue required as left operand of assignment&amp;rdquo;.</description>
    </item>
    <item>
      <title>Move Constructor &amp; Assignment Operator With std::shared_ptr</title>
      <link>http://localhost:1313/posts/move-constructor-assignment-operator-with-shared-ptr/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/move-constructor-assignment-operator-with-shared-ptr/</guid>
      <description>In an earlier article, we have seen how move constructor &amp;amp; move assignment operators helped us in creating our own unique_ptr. Here we will use move constructor &amp;amp; assignment operator to implement unsophisticated shared_ptr.
Implementing Our shared_ptr with Move Constructor &amp;amp; Assignment Operator In some cases, we have a requirement where a single resource is represented by multiple pointers. We can not accomplish this by std::unique_ptr. To accomplish this, we can add a new variable to our smart pointer class which keeps track of reference count at the real-time.</description>
    </item>
  </channel>
</rss>
