<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Vishal Chovatiya</title>
    <link>https://vishalchovatiya.github.io/posts/</link>
    <description>Recent content in Posts on Vishal Chovatiya</description>
    <image>
      <title>Vishal Chovatiya</title>
      <url>https://vishalchovatiya.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://vishalchovatiya.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.128.0</generator>
    <language>en</language>
    <lastBuildDate>Sun, 09 May 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://vishalchovatiya.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43;20 Coroutine: Under The Hood</title>
      <link>https://vishalchovatiya.github.io/posts/cpp20-coroutine-under-the-hood/</link>
      <pubDate>Sun, 09 May 2021 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/cpp20-coroutine-under-the-hood/</guid>
      <description>A coroutine is one of the major feature introduced with the C++20 standard apart from Module, Ranges &amp;amp; Concept. And you see how happy I am to unfold it. I already set the baseline on this topic with my previous article that Coroutine in C Language, where we saw, how suspension-resumption of execution works! With this article &amp;ldquo;C++20 Coroutine: Under The Hood&amp;rdquo;, we will see how compiler creates magic &amp;amp; standard library helps it with basic infrastructure making C++20 coroutine more sophisticated(yet complex) &amp;amp; scalable/customizable.</description>
    </item>
    <item>
      <title>Coroutine in C Language</title>
      <link>https://vishalchovatiya.github.io/posts/coroutine-in-c-language/</link>
      <pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/coroutine-in-c-language/</guid>
      <description>It&amp;rsquo;s been quite a while that I haven&amp;rsquo;t published anything on my blog. But that&amp;rsquo;s due to the job change. I hope you understand that it has never been easy to re-settle in a new environment with new people while maintaining a steep technical learning curve. It takes time to tune yourself accordingly. Anyways, I wrote on &amp;ldquo;Coroutine in C Language&amp;rdquo; as a pre-pend to my upcoming post on C++20 Coroutine.</description>
    </item>
    <item>
      <title>Mastering C&#43;&#43;: Books | Courses | Tools | Tutorials | Blogs | Communities</title>
      <link>https://vishalchovatiya.github.io/posts/mastering-c-books-courses-tools-tutorials-blogs-communities/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/mastering-c-books-courses-tools-tutorials-blogs-communities/</guid>
      <description>Do not get carried away with tittle Mastering C++. This is a never-ending journey. Because ISOCPP is releasing the baby elephants every three years. With the standard covering almost 1500 pages currently, C++ is not the simplest language to learn and master. I have spent quite enough time in the industry. But still feel imposter sometimes. It&amp;rsquo;s been quite a while I was thinking of sharing my Modern C++ journey. Although, I am sharing the knowledge piece-by-piece through such articles.</description>
    </item>
    <item>
      <title>Regex C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/regex-c/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/regex-c/</guid>
      <description>Regular expressions (or regex in short) is a much-hated &amp;amp; underrated topic so far with Modern C++. But at the same time, correct use of regex can spare you writing many lines of code. If you have spent quite enough time in the industry. And not knowing regex then you are missing out on 20-30% productivity. In that case, I highly recommend you to learn regex, as it is one-time investment(something similar to learn once, write anywhere philosophy).</description>
    </item>
    <item>
      <title>Using std::map Wisely With Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/using-std-map-wisely-with-modern-cpp/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/using-std-map-wisely-with-modern-cpp/</guid>
      <description>std::map and its siblings(std::multimap, std::unordered_map/multimap) used to be my favourite containers when I was doing competitive programming. In fact, I still like them(though using less frequently nowadays). And with Modern C++, we now have more reasons to use std::map. That&amp;rsquo;s why I have decided to address this topic by writing an article summarizing these new features. So, without much gibberish, let&amp;rsquo;s dive-in directly.
std::map::contains(C++20) std::map::contains member function is a good step towards code expressiveness.</description>
    </item>
    <item>
      <title>CRTP C&#43;&#43; Examples</title>
      <link>https://vishalchovatiya.github.io/posts/crtp-c-examples/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/crtp-c-examples/</guid>
      <description>Curiously Recurring Template Pattern(CRTP) in C++ is definitely a powerful technique &amp;amp; static alternative to virtual functions. But at the same time, learning it may seem a bit weird at first. If you are like me who struggled to grasp anything in one go. Then this article might help you to provide a thought process on where CRTP fits in day-to-day coding. And, if you are an Embedded Programmer, you may run into CRTP more often.</description>
    </item>
    <item>
      <title>C&#43;&#43; Template: A Quick UpToDate Look(C&#43;&#43;11/14/17/20)</title>
      <link>https://vishalchovatiya.github.io/posts/c-template-a-quick-uptodate-look/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/c-template-a-quick-uptodate-look/</guid>
      <description>I know, it’s been a while since the last time I published something newbies-friendly on my blog. The main reason is that most of my readers are either experienced devs or from C background having modest C++ encounter. But while programming in C++ you need a completely different mindset as both C &amp;amp; C++ belongs to different programming paradigm. And I always strive to show them a better way of doing things in C++.</description>
    </item>
    <item>
      <title>Variadic Template C&#43;&#43;: Implementing Unsophisticated Tuple</title>
      <link>https://vishalchovatiya.github.io/posts/variadic-template-cpp-implementing-unsophisticated-tuple/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/variadic-template-cpp-implementing-unsophisticated-tuple/</guid>
      <description>From C++11, std::tuple is an incredible expansion to Modern C++, that offers a fixed-size col­lec­tion of het­ero­ge­neous values. Un­for­tu­nately, tu­ples can be somewhat dubious to manage in a conventional fash­ion. But, subsequently released C++ stan­dard in­tro­duced a few fea­tures &amp;amp; helpers that greatly re­duce the nec­es­sary boil­er­plate. So, in this article, I will explain the variadic template in C++ with the help of unsophisticated tuple implementation. And also walks you through a tricky part of tuple i.</description>
    </item>
    <item>
      <title>Watchdog Timer(WDT) &amp; Window Watchdog Timer(WWDT)</title>
      <link>https://vishalchovatiya.github.io/posts/watchdog-timer/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/watchdog-timer/</guid>
      <description>In the embedded systems/SoCs, Watchdog Timer(WDT) is the basic, subtle and essential circuit/ic. No matter, how good you write your firmware/software. There are always unexpected situations like your program may stick in an infinite loop, hung somewhere or hardware burn-out/failure. To combat these unexpected situations, we need some circuitry that keeps monitoring the main system/application and in case of unexpected events, it restarts the system. Even the windows-like operating system use the watchdog timer.</description>
    </item>
    <item>
      <title>Double Dispatch in C&#43;&#43;: Recover Original Type of the Object Pointed by Base Class Pointer</title>
      <link>https://vishalchovatiya.github.io/posts/double-dispatch-in-cpp/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/double-dispatch-in-cpp/</guid>
      <description>Double Dispatch in C++ is a mechanism that dispatches a function call to different concrete functions depending on the runtime types of two objects involved in the call. In more simple words, its function calling using two different virtual tables of respective two objects. I know this sounds cryptic, but don&amp;rsquo;t worry I will come to double dispatch solution after trying most of the naive solution so that you will come away with the full understanding of concept without having needless confusions.</description>
    </item>
    <item>
      <title>Liskov&#39;s Substitution Principle in C&#43;&#43; | SOLID as a Rock</title>
      <link>https://vishalchovatiya.github.io/posts/liskovs-substitution-principle-in-cpp-solid-as-a-rock/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/liskovs-substitution-principle-in-cpp-solid-as-a-rock/</guid>
      <description>So you know how to code in general, understand the object-oriented programming, learned C++, and completed at least one Software Development Course (if you’re not there yet, these articles aren&amp;rsquo;t for you). You can write software easily if you know at least one programming language, but is your code any good? Could it be done any better? Is it clean (and what on earth does that mean)? Is your architecture any good?</description>
    </item>
    <item>
      <title>Open Closed Principle in C&#43;&#43; | SOLID as a Rock</title>
      <link>https://vishalchovatiya.github.io/posts/open-closed-principle-in-cpp-solid-as-a-rock/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/open-closed-principle-in-cpp-solid-as-a-rock/</guid>
      <description>This is the second part of a five-part article series about SOLID as Rock design principle. The SOLID design principles, when combined together, make it easy for a programmer to craft software that is easy to maintain, reuse &amp;amp; extend. Open-Closed Principle(OCP) is the second principle in this series which I will discuss here with minimalistic example in Modern C++ along with its benefits &amp;amp; generic guideline.
By the way, If you haven&amp;rsquo;t gone through my previous articles on design principles, then below is the quick links:</description>
    </item>
    <item>
      <title>Single Responsibility Principle in C&#43;&#43; | SOLID as a Rock</title>
      <link>https://vishalchovatiya.github.io/posts/single-responsibility-principle-in-cpp-solid-as-a-rock/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/single-responsibility-principle-in-cpp-solid-as-a-rock/</guid>
      <description>This article is the first part of a five-part series about SOLID as Rock design principle series. The SOLID design principles focus on developing software that is easy to maintainable, reusable &amp;amp; extendable. In this article, we will see an example of the Single Responsibility Principle in C++ along with its benefits &amp;amp; generic guideline.
By the way, If you want to directly jumps to other design principles, then below is the quick links:</description>
    </item>
    <item>
      <title>What Is Design Pattern?</title>
      <link>https://vishalchovatiya.github.io/posts/what-is-design-pattern/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/what-is-design-pattern/</guid>
      <description>After hitting a certain level of experience &amp;amp; spending quite enough time in the industry, I have realised the importance of designing/architecting system &amp;amp; software. So I have started looking into system/software design &amp;amp; got to know nothing can better start than a Design Pattern. And the first thing I have done is googling &amp;ldquo;What is Design Pattern?&amp;rdquo; Hence got the idea of this article.
But as someone without a computer science background(I am from electronics background), learning them was a struggle.</description>
    </item>
    <item>
      <title>Builder Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/builder-design-pattern-in-modern-cpp/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/builder-design-pattern-in-modern-cpp/</guid>
      <description>In software engineering, Creational Design Patterns deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. The basic or ordinary form of object creation could result in design problems or added complexity to the design. Builder Design Pattern in C++ solves this specific problem by separating the construction of a complex object from its representation.
By the way, If you haven’t check out my other articles on Creational Design Patterns, then here is the list:</description>
    </item>
    <item>
      <title>Dependency Inversion Principle in C&#43;&#43; | SOLID as a Rock</title>
      <link>https://vishalchovatiya.github.io/posts/dependency-inversion-principle-in-cpp-solid-as-a-rock/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/dependency-inversion-principle-in-cpp-solid-as-a-rock/</guid>
      <description>Dependency Inversion Principle in C++ is the fifth &amp;amp; last design principle of a series SOLID as a Rock design principles. The SOLID design principles focus on developing software that is easy to maintainable, reusable &amp;amp; extendable. In this article, we will see an example code with the flaw &amp;amp; correct it with help of DIP. We will also see guideline &amp;amp; benefits of DIP in closure of the article.</description>
    </item>
    <item>
      <title>Factory Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/factory-design-pattern-in-modern-cpp/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/factory-design-pattern-in-modern-cpp/</guid>
      <description>In software engineering, Creational Design Patterns deal with object creation mechanisms, i.e. try to create objects in a manner suitable to the situation. In addition to this basic or ordinary form of object creation could result in design problems or added complexity to the design. Factory Design Pattern in C++ helps to mitigate this issue by creating objects using separate methods or polymorphic classes.
By the way, If you haven’t check out my other articles on Creational Design Patterns, then here is the list:</description>
    </item>
    <item>
      <title>Interface Segregation Principle in C&#43;&#43; | SOLID as a Rock</title>
      <link>https://vishalchovatiya.github.io/posts/interface-segregation-principle-in-cpp-solid-as-a-rock/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/interface-segregation-principle-in-cpp-solid-as-a-rock/</guid>
      <description>Interface Segregation Principle in C++ is the fourth &amp;amp; by far the simplest design principle of a series SOLID as a Rock design principles. The SOLID design principles focus on developing software that is easy to maintainable, reusable &amp;amp; extendable. In this article, we will see a code violating ISP, a solution to the same code, guideline &amp;amp; benefits of ISP.
By the way, If you haven&amp;rsquo;t gone through my previous articles on design principles, then below is the quick links:</description>
    </item>
    <item>
      <title>Prototype Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/prototype-design-pattern-in-modern-cpp/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/prototype-design-pattern-in-modern-cpp/</guid>
      <description>Prototype Design Pattern is a Creational Design Pattern that helps in the prototyping(creating/copying cheaply) of an object using separate methods or polymorphic classes. You can consider the prototype as a template of an object before the actual object is constructed. In this article of the Creational Design Patterns, we&amp;rsquo;re going to take a look at why we need a Prototype Design Pattern in C++ i.e. motivation, prototype factory &amp;amp; leveraging prototype design pattern to implement virtual copy constructor.</description>
    </item>
    <item>
      <title>Singleton Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/singleton-design-pattern-in-modern-cpp/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/singleton-design-pattern-in-modern-cpp/</guid>
      <description>In software engineering, Creational Design Patterns deal with object creation mechanisms, i.e. try to create objects in a manner suitable to the situation. The basic or ordinary form of object creation could result in design problems or added complexity to the design. In this article of the Creational Design Patterns, we&amp;rsquo;re going to take a look at the much-hated &amp;amp; commonly asked design pattern in a programming interview. That is Singleton Design Pattern in Modern C++ which criticizes for its extensibility &amp;amp; testability.</description>
    </item>
    <item>
      <title>Adapter Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/adapter-design-pattern-in-modern-cpp/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/adapter-design-pattern-in-modern-cpp/</guid>
      <description>In software engineering, Structural Design Patterns deal with the relationship between object &amp;amp; classes i.e. how object &amp;amp; classes interact or build a relationship in a manner suitable to the situation. The structural design patterns simplify the structure by identifying relationships. In this article of the Structural Design Patterns, we&amp;rsquo;re going to take a look at Adapter Design Pattern in Modern C++ which used to convert the interface of an existing class into another interface that client/API-user expect.</description>
    </item>
    <item>
      <title>Bridge Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/bridge-design-pattern-in-modern-cpp/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/bridge-design-pattern-in-modern-cpp/</guid>
      <description>Bridge Design Pattern is a Structural Design Pattern used to decouple a class into two parts – abstraction and it’s implementation – so that both can be developed independently. This promotes the loose coupling between class abstraction &amp;amp; its implementation. You get this decoupling by adding one more level of indirection i.e. an interface which acts as a bridge between your original class &amp;amp; functionality. Insulation is another name of Bridge Design Pattern in C++ world.</description>
    </item>
    <item>
      <title>Composite Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/composite-design-pattern-in-modern-cpp/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/composite-design-pattern-in-modern-cpp/</guid>
      <description>GoF describes the Composite Design Pattern as “Compose objects into a tree structure to represent part-whole hierarchies. Composite lets the client treat individual objects and compositions of objects uniformly”. This seems over-complicated to me. So, I would not go into tree-leaf kind of jargon. Rather I directly saw you 2 or 3 different ways to implement Composite Design Pattern in Modern C++. But in simple words, the Composite Design Pattern is a Structural Design Pattern with a goal to treat the group of objects in the same manner as a single object.</description>
    </item>
    <item>
      <title>Decorator Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/decorator-design-pattern-in-modern-cpp/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/decorator-design-pattern-in-modern-cpp/</guid>
      <description>In software engineering, Structural Design Patterns deal with the relationship between object &amp;amp; classes i.e. how object &amp;amp; classes interact or build a relationship in a manner suitable to the situation. The Structural Design Patterns simplify the structure by identifying relationships. In this article of the Structural Design Patterns, we&amp;rsquo;re going to take a look at the not so complex yet subtle design pattern that is Decorator Design Pattern in Modern C++ due to its extensibility &amp;amp; testability.</description>
    </item>
    <item>
      <title>Facade Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/facade-design-pattern-in-modern-cpp/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/facade-design-pattern-in-modern-cpp/</guid>
      <description>Facade Design Pattern is a Structural Design Pattern used to provide a unified interface to a complex system. It is same as Facade in building architecture, a Facade is an object that serves as a front-facing interface masking a more complex underlying system. A Facade Design Pattern in C++ can:
Improve the readability &amp;amp; usability of a software library by masking interaction with more complex components by providing a single simplified API.</description>
    </item>
    <item>
      <title>Flyweight Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/flyweight-design-pattern-in-modern-cpp/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/flyweight-design-pattern-in-modern-cpp/</guid>
      <description>Flyweight Design Pattern is a Structural Design Pattern that concerned with space optimization. It is a technique to minimizes memory footprint by sharing or avoiding redundancy as much as possible with other similar objects. Flyweight Design Pattern in Modern C++ is often used in a situation where object count is higher which uses an unacceptable amount of memory. Often some parts of these objects can be shared &amp;amp; kept in common data structures that can be used by multiple objects.</description>
    </item>
    <item>
      <title>Proxy Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/proxy-design-pattern-in-modern-cpp/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/proxy-design-pattern-in-modern-cpp/</guid>
      <description>In software engineering, Structural Design Patterns deal with the relationship between objects i.e. how objects/classes interact or build a relationship in a manner suitable to the situation. The Structural Design Patterns simplify the structure by identifying relationships. In this article of the Structural Design Patterns, we&amp;rsquo;re going to take a look at Proxy Design Pattern in C++ which dictates the way you access the object.
If you haven’t check out other Structural Design Patterns, then here is the list:</description>
    </item>
    <item>
      <title>Chain of Responsibility Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/chain-of-responsibility-design-pattern-in-modern-cpp/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/chain-of-responsibility-design-pattern-in-modern-cpp/</guid>
      <description>Chain of Responsibility is a Behavioural Design Pattern that provides facility to propagate event/request/command/query to the chain of loosely coupled objects. Chain of Responsibility Design Pattern in Modern C++ lets you pass requests along a chain of handlers &amp;amp; upon receiving a request, each handler decides either to process the request or to forward it to the next handler in the chain.
By the way, If you haven’t check out my other articles on Behavioural Design Patterns, then here is the list:</description>
    </item>
    <item>
      <title>Command Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/command-design-pattern-in-modern-cpp/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/command-design-pattern-in-modern-cpp/</guid>
      <description>In software engineering, Behavioural Design Patterns deal with the assignment of responsibilities between objects which in turn make the interaction between the objects easy &amp;amp; loosely coupled. In this article of the Behavioural Design Patterns, we&amp;rsquo;re going to take a look at Command Design Pattern in Modern C++ which encapsulate all the details related to operation into a separate object. Command Design Pattern is widely used in sophisticated software. In fact, you might be using it every day without even knowing that.</description>
    </item>
    <item>
      <title>Interpreter Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/interpreter-design-pattern-in-modern-cpp/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/interpreter-design-pattern-in-modern-cpp/</guid>
      <description>Interpreter Design Pattern is a Behavioural Design Pattern which is a component that processes structured text data by turning it into separate lexical tokens(lexing) and then interpreting sequences of tokens(parsing). In this article, we will see the Interpreter Design Pattern in Modern C++.
By the way, If you haven’t check out my other articles on Behavioural Design Patterns, then here is the list:
Chain of responsibility Command Interpreter Iterator Mediator Memento Observer State Strategy Template Method Visitor The code snippets you see throughout this series of articles are simplified not sophisticated.</description>
    </item>
    <item>
      <title>Iterator Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/iterator-design-pattern-in-modern-cpp/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/iterator-design-pattern-in-modern-cpp/</guid>
      <description>Iterator Design Pattern in Modern C++ is a heavily used pattern i.e. provides facility to traverse data containers sophistically. For simplicity, you can consider a pointer moving across an array, but the real magic comes when you get to the next element of a container, in that case, you need not know anything about how the container is constructed(like sequential(not necessarily be contiguous), associative or hashed). This is handled by the iterator.</description>
    </item>
    <item>
      <title>Mediator Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/mediator-design-pattern-in-modern-cpp/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/mediator-design-pattern-in-modern-cpp/</guid>
      <description>In software engineering, Behavioural Design Patterns deal with the assignment of responsibilities between objects &amp;amp; encapsulating behaviour in an object to delegate requests. In this article of the Behavioural Design Patterns, we&amp;rsquo;re going to take a look at Mediator Design Pattern in Modern C++. And the motivation behind the Mediator Design Pattern is to provide proper communication between components by letting the components be aware(or unaware also, depending upon use case) of each other&amp;rsquo;s presence or absence in the system.</description>
    </item>
    <item>
      <title>Memento Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/memento-design-pattern-in-modern-cpp/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/memento-design-pattern-in-modern-cpp/</guid>
      <description>Memento Design Pattern in Modern C++ is a very straight forward Behavioural Design Pattern. The motivation behind using the Memento Design Pattern is to keep some sort of token which then allows you to restore an object to a particular state. This is particularly useful if you have a system with medieval components i.e. an object or indeed a set of objects goes through a set of changes.
By the way, If you haven’t check out my other articles on Behavioural Design Patterns, then here is the list:</description>
    </item>
    <item>
      <title>Observer Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/observer-design-pattern-in-modern-cpp/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/observer-design-pattern-in-modern-cpp/</guid>
      <description>The Observer Design Pattern is a type of Behavioural Design Pattern that use to get information when certain events happen i.e. basically one component want information about something happening in the other component. And that can a lot of things like a field changes to a particular value or you want to information when the object does a particular thing, etc. Observer Design Pattern in Modern C++ enables you to create subscription mechanism to notify multiple objects about events that happen to the object they&amp;rsquo;re observing.</description>
    </item>
    <item>
      <title>Double Dispatch : Visitor Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/double-dispatch-visitor-design-pattern-in-modern-cpp/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/double-dispatch-visitor-design-pattern-in-modern-cpp/</guid>
      <description>In software engineering, Behavioural Design Patterns deal with the assignment of responsibilities between objects. That in turn, make the interaction between the objects easy &amp;amp; loosely coupled. In this article of the design pattern series, we&amp;rsquo;re going to take a look at Visitor Design Pattern in Modern C++ which is also known as a classic technique for recovering lost type information(using Double Dispatch[TODO]). Visitor Design Pattern is used to perform an operation on a group of similar kind of objects or hierarchy.</description>
    </item>
    <item>
      <title>State Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/state-design-pattern-in-modern-cpp/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/state-design-pattern-in-modern-cpp/</guid>
      <description>A State Design Pattern is a type of Behavioural Design Pattern that defines objects behaviour(defined as a state) based on some event happens. And that can be the internal or external event. For example, if you design an ATM machine using the State Design Pattern, the external event could be someone inserted debit/credit card &amp;amp; internal event could be a user timeout. So in nutshell, the State Design Pattern in Modern C++ is a systematic way to implement certain behaviour on a particular event considering the context.</description>
    </item>
    <item>
      <title>Strategy Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/strategy-design-pattern-in-modern-cpp/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/strategy-design-pattern-in-modern-cpp/</guid>
      <description>In software engineering, Behavioural Design Patterns deal with the assignment of responsibilities between objects which in turn make the interaction between the objects easy &amp;amp; loosely coupled. In this article of the Behavioural Design Pattern series, we&amp;rsquo;re going to take a look at Strategy Design Pattern in Modern C++. It allows you to partially specify the behaviour of the class and then augment it later on. This pattern is also known as policy in many programming languages including especially in the C++ language.</description>
    </item>
    <item>
      <title>Template Method Design Pattern in Modern C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/template-method-design-pattern-in-modern-cpp/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/template-method-design-pattern-in-modern-cpp/</guid>
      <description>In software engineering, Behavioural Design Patterns deal with the assignment of responsibilities between objects. And encapsulating behaviour in an object to delegate requests. The Behavioural Design Patterns make the interaction between the objects easy &amp;amp; loosely coupled. In this article of the design pattern series, we&amp;rsquo;re going to take a look at Template Method Design Pattern in Modern C++. It allows us to define the skeleton of the algorithm in the base class with concrete implementations defined in derived classes.</description>
    </item>
    <item>
      <title>What Exactly nullptr Is in C&#43;&#43;?</title>
      <link>https://vishalchovatiya.github.io/posts/what-exactly-nullptr-is-in-cpp/</link>
      <pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/what-exactly-nullptr-is-in-cpp/</guid>
      <description>The answer to &amp;ldquo;What exactly nullptr is in C++?&amp;rdquo; would be a piece of cake for experienced C++ eyes &amp;amp; for those who are aware of Modern C++ i.e. keyword. But nullptr is more than just a keyword in C++ &amp;amp; to explain that, I have written this article. But before jump-into it, we will see issues with NULL &amp;amp; then we&amp;rsquo;ll dive into the unsophisticated implementation of nullptr &amp;amp; some use-cases of nullptr.</description>
    </item>
    <item>
      <title>7 Advance C&#43;&#43; Concepts &amp; Idiom Examples You Should Know</title>
      <link>https://vishalchovatiya.github.io/posts/7-advance-cpp-concepts-idiom-examples-you-should-know/</link>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/7-advance-cpp-concepts-idiom-examples-you-should-know/</guid>
      <description>So I have started updating myself with Modern C++ a while ago &amp;amp; since my post 21 new features of Modern C++ to use in your project &amp;amp; All about lambda function in C++ was popular I decided to write about advance C++ concepts &amp;amp; idioms which I have learned from this wikibook &amp;amp; course.
There are many other advance C++ concepts &amp;amp; idioms as well but I consider these 7 as &amp;ldquo;should-know&amp;rdquo;.</description>
    </item>
    <item>
      <title>C&#43;&#43; Exception Handling Best Practices: 7 Things To Know</title>
      <link>https://vishalchovatiya.github.io/posts/7-best-practices-for-exception-handling-in-cpp-with-example/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/7-best-practices-for-exception-handling-in-cpp-with-example/</guid>
      <description>Exception handling in C++ is a well-unschooled topic if you observe initial stages of the learning curve. There are numerous tutorials available online on exception handling in C++. But few explains what you should not do &amp;amp; intricacies around it. So here I am to bridge the gap &amp;amp; show you some intricacies, from where &amp;amp; why you should not throw an exception and C++ exception handling best practices. Along with some newer features introduced for exception handling in Modern C++ with example.</description>
    </item>
    <item>
      <title>21 New Features of Modern C&#43;&#43; to Use in Your Project</title>
      <link>https://vishalchovatiya.github.io/posts/21-new-features-of-modern-cpp-to-use-in-your-project/</link>
      <pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/21-new-features-of-modern-cpp-to-use-in-your-project/</guid>
      <description>So, you came across the Modern C++ &amp;amp; overwhelmed by its features in terms of performance, convenience &amp;amp; code expressiveness. But in a dilemma that how you can spot where you can enforce Modern C++ features in your day to day coding job. No worries, here we will see 21 new features of Modern C++ you can use in your project.
C++ community releasing new standards more frequently than iPhone releases.</description>
    </item>
    <item>
      <title>All About Lambda Function in C&#43;&#43;(From C&#43;&#43;11 to C&#43;&#43;20)</title>
      <link>https://vishalchovatiya.github.io/posts/learn-lambda-function-in-cpp-with-example/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/learn-lambda-function-in-cpp-with-example/</guid>
      <description>Lambda function is quite an intuitive &amp;amp; widely loved feature introduced in C++11. And, there are tons of articles &amp;amp; tutorials already available on the topic. But, there are very few or none of them touched upon things like IIFE, types of lambda and newer updates on lambda by subsequent standard releases. So, I got the opportunity to fill the blank. I will start this article with what is lambda function!</description>
    </item>
    <item>
      <title>How C Program Converts Into Assembly!</title>
      <link>https://vishalchovatiya.github.io/posts/how-c-program-convert-into-assembly/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/how-c-program-convert-into-assembly/</guid>
      <description>In an earlier article, we have seen C runtime: before starting main &amp;amp; How C program stored in RAM memory. Here we will see &amp;ldquo;How C program converts into assembly?&amp;rdquo; and different aspect of its working at the machine level.
A Bit About Functions Stack Frames During function code execution, a new stack frame is created in stack memory to allow access to function parameters and local variables. The direction of stack frame growth totally depends on compiler ABI which is out of our scope for this article.</description>
    </item>
    <item>
      <title>How C Program Stored in Ram Memory!</title>
      <link>https://vishalchovatiya.github.io/posts/how-c-program-stored-in-ram-memory/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/how-c-program-stored-in-ram-memory/</guid>
      <description>When you run any C-program, its executable image loaded into RAM of computer in an organized manner which called process address space or memory layout of C program. Here I have tried to show you the same thing in two parts . In the 1st part i.e. &amp;ldquo;Overview&amp;rdquo;, we will see segment-wise overview &amp;amp; in 2nd part i.e. &amp;ldquo;Example&amp;rdquo;, we&amp;rsquo;ll see How C program stored in RAM memory? with example.</description>
    </item>
    <item>
      <title>Default Handlers in C: weak_alias</title>
      <link>https://vishalchovatiya.github.io/posts/default-handlers-in-c-weak_alias/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/default-handlers-in-c-weak_alias/</guid>
      <description>Default Handlers in C: weak_alias function tells the linker that new is to be a weak alias for old. That is, this definition of new is a weak symbol. If there is no other definition of a symbol called new, this old definition stands.
Might seems alien to you first, so go through a below example &amp;amp; read again.
Definition of weak_alias is as follows : 1 2 #define weak_alias(old, new) \ extern __typeof(old) new __attribute__((weak, alias(#old))) If there is another (non-weak) definition of new then that non-weak(i.</description>
    </item>
    <item>
      <title>How Floating-Point No Is Stored in Memory?</title>
      <link>https://vishalchovatiya.github.io/posts/how-floating-point-no-is-stored-memory/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/how-floating-point-no-is-stored-memory/</guid>
      <description>This article is just a simplification of the IEEE 754 standard. Here, we will see how floating-point no stored in memory, floating-point exceptions/rounding, etc. But if you will want to find more authoritative sources then go for
What Every Computer Scientist Should Know About Floating-Point Arithmetic https://en.wikipedia.org/wiki/IEEE_754-1985 https://en.wikipedia.org/wiki/Floating_point. Floating-point numbers stored by encoding significand &amp;amp; the exponent (along with a sign bit)
Above line contains 2-3 abstract terms &amp;amp; I think you will unable to understand the above line until you read further.</description>
    </item>
    <item>
      <title>How to Install and Configure VNC Server on Linux!</title>
      <link>https://vishalchovatiya.github.io/posts/how-to-install-configure-vncserver-linux-2/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/how-to-install-configure-vncserver-linux-2/</guid>
      <description>In the early days of my career, I used to work on Linux machines remotely. In those days, I was not knowing about SSH &amp;amp; all and people around me was using Putty as it was very easy &amp;amp; simple. Open source as well. You just have to enter IP &amp;amp; Port and you would get command-line access to remote machine. here, we will discuss &amp;ldquo;how to install and configure VNC server on Linux?</description>
    </item>
    <item>
      <title>Lvalue Rvalue and Their References With Example in C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/lvalue-rvalue-and-their-references-with-example-in-cpp/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/lvalue-rvalue-and-their-references-with-example-in-cpp/</guid>
      <description>This topic might be a piece of cake for every experienced C++ veteran. But I remember back in the days when I was a novice &amp;amp; introducing myself with Modern C++, I was really irritated by C++ compiler messages saying this is lvalue &amp;amp; that is rvalue kind of jargons. And even if you are not using C++, you may have faced compiler error in C language saying &amp;ldquo;lvalue required as left operand of assignment&amp;rdquo;.</description>
    </item>
    <item>
      <title>Move Constructor &amp; Assignment Operator With std::shared_ptr</title>
      <link>https://vishalchovatiya.github.io/posts/move-constructor-assignment-operator-with-shared-ptr/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/move-constructor-assignment-operator-with-shared-ptr/</guid>
      <description>In an earlier article, we have seen how move constructor &amp;amp; move assignment operators helped us in creating our own unique_ptr. Here we will use move constructor &amp;amp; assignment operator to implement unsophisticated shared_ptr.
Implementing Our shared_ptr with Move Constructor &amp;amp; Assignment Operator In some cases, we have a requirement where a single resource is represented by multiple pointers. We can not accomplish this by std::unique_ptr. To accomplish this, we can add a new variable to our smart pointer class which keeps track of reference count at the real-time.</description>
    </item>
    <item>
      <title>Understanding unique_ptr with Example in C&#43;&#43;11</title>
      <link>https://vishalchovatiya.github.io/posts/unique_ptr-with-example-in-c/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/unique_ptr-with-example-in-c/</guid>
      <description>The smart pointers are a really good mechanism to manage dynamically allocated resources. In this article, we will see unique_ptr with example in C++11. But we don&amp;rsquo;t discuss standard smart pointers from a library. Rather, we implement our own smart pointer equivalent to it. This will give us an idea of inside working of smart pointers.
Brief Prior to C++11, the standard provided std::auto_ptr. Which had some limitations. But from C++11, standard provided many smart pointers classes.</description>
    </item>
    <item>
      <title>C&#43;&#43; Type Casting With Example for C Developers</title>
      <link>https://vishalchovatiya.github.io/posts/cpp-type-casting-with-example-for-c-developers/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/cpp-type-casting-with-example-for-c-developers/</guid>
      <description>The typecasting is the feature which makes C++ more type-safe, robust &amp;amp; may convince you to use it over C. But this is also a more underrated topic when you are a newbie or moving from C background. Hence, I come up with an article on it. Here, we will not only see the C++ type casting with example but we will also cover Why do we need typecasting? &amp;amp; C++ type casting cheat codes for C developers to remember &amp;amp; employ it easily.</description>
    </item>
    <item>
      <title>Complications of Using the Virtual Base Class</title>
      <link>https://vishalchovatiya.github.io/posts/complications-of-using-the-virtual-base-class/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/complications-of-using-the-virtual-base-class/</guid>
      <description>In the previous article about How Does Virtual Base Class Works Internally? we have seen address resolution of virtual base class &amp;amp; why it&amp;rsquo;s needed. But I have not discussed Complications of Using the Virtual Base Class. Which we will see in this article. This is going to be a bit complex &amp;amp; clumsy then learning the internal working of the virtual base class. But if you are not tired, then read forward.</description>
    </item>
    <item>
      <title>Part 3: All About Virtual Keyword in C&#43;&#43;: How Does Virtual Destructor Works?</title>
      <link>https://vishalchovatiya.github.io/posts/part-3-all-about-virtual-keyword-in-c-how-virtual-destructor-works/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/part-3-all-about-virtual-keyword-in-c-how-virtual-destructor-works/</guid>
      <description>Finally, we are in the 3rd &amp;amp; last part of this series. We have already discussed how virtual function &amp;amp; virtual class/inheritance works internally in previous parts. We left one topic i.e. &amp;ldquo;How Does Virtual Destructor Works?&amp;rdquo; which we will see now. As usual, before learning anything new I usually start with “Why Do We Need It in the First Place?”
Why Do We Need a Virtual Destructor? We will understand this with our earlier example(slightly twisted): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class protocol_t { private: uint8_t *_type; // storage .</description>
    </item>
    <item>
      <title>When to Use const vs constexpr in C&#43;&#43;</title>
      <link>https://vishalchovatiya.github.io/posts/when-to-use-const-vs-constexpr-in-cpp/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/when-to-use-const-vs-constexpr-in-cpp/</guid>
      <description>While introducing myself to Modern C++ &amp;amp; its new features introduced in C++11 &amp;amp; C++14, I have completely neglected this keyword constexpr. Initially, I was confused about when to use const vs constexpr in C++ &amp;amp; how this constexpr works &amp;amp; differ with const. So, I have studied this from different sources &amp;amp; here is the consolidation of it:
Primitive constexpr Variables 1 2 3 int varA = 3; const int varB = 5; constexpr int varC = 7; All of the above variable having a value which is known at compile time.</description>
    </item>
    <item>
      <title>2 Wrong Way to Learn Copy Assignment Operator in C&#43;&#43; With Example</title>
      <link>https://vishalchovatiya.github.io/posts/2-wrong-way-to-learn-copy-assignment-operator-in-cpp-with-example/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/2-wrong-way-to-learn-copy-assignment-operator-in-cpp-with-example/</guid>
      <description>While I was introducing myself to C++, I was confused about the syntax of the copy assignment operator in C++ &amp;amp; some of its use-cases. I have learned those lessons the hard way. And so I have decided to write this article, where we see 2 wrong way to learn copy assignment operator in C++ with example. And we also see why we need it &amp;amp; why its syntax like that only.</description>
    </item>
    <item>
      <title>All About Copy Constructor in C&#43;&#43; With Example</title>
      <link>https://vishalchovatiya.github.io/posts/all-about-copy-constructor-in-cpp-with-example/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/all-about-copy-constructor-in-cpp-with-example/</guid>
      <description>Do not carry away with the title &amp;ldquo;All about copy constructor in C++ with example&amp;rdquo;. In this article, I am not going to describe what copy constructor in C++ is. There is plenty of material available for that over the internet. Rather we will discuss why, where &amp;amp; how it used, how compiler synthesizes it for you and in what scenarios it called or not synthesized.
Why: Copy Constructor The simple answer is to copy the data within the same data types, but if you want more concrete idea then see below image:</description>
    </item>
    <item>
      <title>Inside the C&#43;&#43; Object Model</title>
      <link>https://vishalchovatiya.github.io/posts/inside-the-cpp-object-model/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/inside-the-cpp-object-model/</guid>
      <description>This article is the collection of concept I have acquired while introducing myself to C++ by googling here &amp;amp; there. This material is also not in order. I have just collected the answer to my quick question. And write it down here. But one thing I can assure you is that once you go through this article. You can connect many broken thought of understanding on what runs &amp;ldquo;Inside the C++ object model&amp;rdquo;.</description>
    </item>
    <item>
      <title>Memory Layout of C&#43;&#43; Object in Different Scenarios</title>
      <link>https://vishalchovatiya.github.io/posts/memory-layout-of-cpp-object/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/memory-layout-of-cpp-object/</guid>
      <description>In this article, we will see the memory layout of different C++ Object. And how different storage &amp;amp; access specifiers affect this memory footprint. I am not going to discuss compiler augmented code, name mangling &amp;amp; working of any C++ mechanism related to memory as it is compiler &amp;amp; architecture-dependent. To keep this further simple, I have considered the standard stack growth direction i.e. downwards. And with the same, data members are represented inverted in memory(thanks to Thomas Vermeilh for pointing that out), that too I have ignored for simplicity.</description>
    </item>
    <item>
      <title>Part 1: All About Virtual Keyword in C&#43;&#43;: How Does Virtual Function Works Internally?</title>
      <link>https://vishalchovatiya.github.io/posts/part-1-all-about-virtual-keyword-in-cpp-how-virtual-function-works-internally/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/part-1-all-about-virtual-keyword-in-cpp-how-virtual-function-works-internally/</guid>
      <description>&amp;ldquo;All About Virtual Keyword in C++&amp;rdquo; is a series of articles(total of three, PART 1, PART 2, PART 3) describe working of the virtual keyword in different scenarios. This article mostly focuses on &amp;ldquo;How Does Virtual Function Works Internally?&amp;rdquo;. In other words, How dynamic dispatch done in C++! Although I am not a compiler writer, but this is what I have learned so far from various sources, courses, books &amp;amp; disassembly of C++ program.</description>
    </item>
    <item>
      <title>Part 2: All About Virtual Keyword in C&#43;&#43;: How Does Virtual Base Class Works Internally?</title>
      <link>https://vishalchovatiya.github.io/posts/part-2-all-about-virtual-keyword-in-cpp-how-virtual-class-works-internally/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/part-2-all-about-virtual-keyword-in-cpp-how-virtual-class-works-internally/</guid>
      <description>In PART 1 of &amp;ldquo;All About Virtual Keyword in C++&amp;rdquo; series, we have discussed &amp;ldquo;How Does Virtual Function Works Internally?&amp;rdquo;. So, in this article, I will discuss &amp;ldquo;How Does Virtual Base Class Works Internally?&amp;rdquo;. I am iterating the same thing which I have mentioned in the earlier article as well that implementation of a virtual mechanism is purely compiler dependent. So, there is no C++ standard is defined for such dynamic dispatch.</description>
    </item>
    <item>
      <title>How Does Virtual Memory Work?</title>
      <link>https://vishalchovatiya.github.io/posts/how-does-virtual-memory-work/</link>
      <pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/how-does-virtual-memory-work/</guid>
      <description>Have you ever wondered , How game of size 8 GB is running on a computer has 4 GB of RAM only? or You can play multiple movies simultaneously combined size more than RAM size? If you are a software developer, you may come across a word like multi-tasking or multiprocessing which is key concept behind this. In other words, it creates virtual memory which is a memory management technique. Here we will see how it works</description>
    </item>
    <item>
      <title>How Do malloc &amp; free Work in C!</title>
      <link>https://vishalchovatiya.github.io/posts/how-do-malloc-free-work-in-c/</link>
      <pubDate>Sat, 08 Oct 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/how-do-malloc-free-work-in-c/</guid>
      <description>As we know, the process can allocate &amp;amp; deallocate memory using malloc &amp;amp; free in C language. But do you ever consider what happens behind the scene ? or How do malloc &amp;amp; free work? Let see
Allocating Memory on the Heap A process can allocate memory by increasing the size of the heap.
Heap is a variable-size segment of contiguous virtual memory that begins just after the uninitialized data segment of a process and grows &amp;amp; shrinks as memory allocated and freed.</description>
    </item>
    <item>
      <title>Dynamic Linking Example</title>
      <link>https://vishalchovatiya.github.io/posts/dynamic-linking-example/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/dynamic-linking-example/</guid>
      <description>Following example covers API like dladdr, dlclose, dlerror, dlopen, dlsym and flags like RTLD_LAZY, RTLD_NOW, RTLD_GLOBAL, `RTLD_LOCAL, `RTLD_NODELETE`, `RTLD_NOLOAD`, RTLD_NEXT, RTLD_DEFAULT, etc.
At First Sight, This Might Look Lengthy &amp;amp; Alien, But If You Spend 5 Min, You Might Get What You Looking For. I Struggle With Finding Dynamic Linking Example On Net When I Came Across Dynamic Linking Related Development. So I Wrote One Helping Post. flags.c We will create binary flags out of flags.</description>
    </item>
    <item>
      <title>GNU Build System: Automake, Autoconf, Libtool</title>
      <link>https://vishalchovatiya.github.io/posts/gnu-build-system-automake-autoconf-libtool/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/gnu-build-system-automake-autoconf-libtool/</guid>
      <description>Brief GNU Build System: Automake, Autoconf, Libtool are a suite of programming tools used to make source code packages portable to many Unix-like systems. Why We Need Autotools: Autoconf: automatically generates configure script by scans of existing tree to find its dependencies, that are supposed to work on all kinds of platforms. configure generates a config.h file (from a template) which programs can include to work around portability issues. For example, if HAVE_LIBPTHREAD is not defined, use forks instead.</description>
    </item>
    <item>
      <title>How Program Gets Run: Linux</title>
      <link>https://vishalchovatiya.github.io/posts/program-gets-run-linux/</link>
      <pubDate>Sun, 25 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/program-gets-run-linux/</guid>
      <description>I know it’s long, but please bear with me &amp;amp; have patience.
How do we launch our programs? Do you know how programs get runs behind the screen when you double-click on it or you type ./a.out on shell As you know, the standard way to launch an application from a shell is to start terminal emulator application &amp;amp; just write the name of the program &amp;amp; pass or not arguments to our program, for example: 1 2 3 4 5 6 7 8 [vishal@machine Desktop]$ ls --version ls (GNU coreutils) 8.</description>
    </item>
    <item>
      <title>How to hack C/C&#43;&#43; application using RTLD_NEXT with an easy example</title>
      <link>https://vishalchovatiya.github.io/posts/hack-c-cpp-application-using-rtld-next-with-an-easy-example/</link>
      <pubDate>Sun, 25 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/hack-c-cpp-application-using-rtld-next-with-an-easy-example/</guid>
      <description>While I was working as a core C library developer with my previous employer. I came across this RTLD_NEXT flag in dynamic linking which has the amazing capability and can be easily exploited or used for unethical purpose(Here I intend to educate the developer to don&amp;rsquo;t be victims). In this article, I will show you a simple way to hack C/C++ application using RTLD_NEXT with an easy example.
Brief Let say you have a C/C++ application/tool which is highly proprietary and driving most of the business to your company.</description>
    </item>
    <item>
      <title>A Bit About mmap</title>
      <link>https://vishalchovatiya.github.io/posts/mmap/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/mmap/</guid>
      <description>Points to Catch mmap()is system call used to maps files or devices into memory Linux provides the `mremap( ) system call for expanding or shrinking the size of a given mapping. POSIX defines the `mprotect( ) interface to allow programs to change the permissions of existing regions of memory. Synchronizing a File with a Mapping: A system call msync( ) flushes back to disk any changes made to a file mapped via mmap( ), synchronizing the mapped file with the mapping *Advantage of mmap() over open(), read()&amp;amp; write()` mmap is great if you have multiple processes accessing data in a read-only fashion from the same file which saves many system calls or context switching overheads Useful for inter-process communication.</description>
    </item>
    <item>
      <title>A Bit About vfork</title>
      <link>https://vishalchovatiya.github.io/posts/vfork/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/vfork/</guid>
      <description>What is vfork ? It&amp;rsquo;s a special case of a clone. It is used to create new processes without copying the page tables of the parent process. calling thread is suspended until the child call execve or _exit. Points To Remember vfork()is an obsolete optimization. Before good memory management, fork()made a full copy of the parent&amp;rsquo;s memory, so it was pretty expensive. since in many cases a fork()was followed by `exec(), which discards the current memory map and creates a new one, it was a needless expense.</description>
    </item>
    <item>
      <title>Binary semaphore example between threads in C</title>
      <link>https://vishalchovatiya.github.io/posts/binary-semaphore-example-between-threads-in-c/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/binary-semaphore-example-between-threads-in-c/</guid>
      <description>Semaphore is a synchronization mechanism. In more words, semaphores are a technique for coordinating or synchronizing activities in which multiple processes compete for the same resources. There are 2 types of semaphores: Binary semaphores &amp;amp; Counting semaphores. But our focus would be on binary semaphore only. That too binary semaphore example between threads in C language specifically. If you are in search of semaphore between processes then see this.
As its name suggest binary semaphore can have a value either 0 or 1.</description>
    </item>
    <item>
      <title>Clone system call example</title>
      <link>https://vishalchovatiya.github.io/posts/clone-system-call-example/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/clone-system-call-example/</guid>
      <description>This is a quick article on Clone system call example without talking shit. So let&amp;rsquo;s see some pointers for the same :
clone() creates a new process, in a manner similar to fork. It is actually a library function layered on top of the underlying clone()system call. Unlike fork , these calls allow the child process to share parts of its execution context with the calling process, such as the memory space, the table of file descriptors, and the table of signal handlers.</description>
    </item>
    <item>
      <title>Create Process Using fork()</title>
      <link>https://vishalchovatiya.github.io/posts/create-process-using-fork/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/create-process-using-fork/</guid>
      <description>Points To Catch When we fork in any process it simply creates a copy of the same process which we call child process 1 2 Parent Child return PID 0 Fork returns 0 in the child process &amp;amp; PID of the child process in the parent process, which you can see in above example. returns -1 on failer.
Create copy of process including memory variables &amp;amp; stored value in it with its own address space Example 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include &amp;lt;stdio.</description>
    </item>
    <item>
      <title>CRT: C Run Time Before Starting main()</title>
      <link>https://vishalchovatiya.github.io/posts/crt-run-time-before-starting-main/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/crt-run-time-before-starting-main/</guid>
      <description>There are a lot of functions called before &amp;amp; after the main execution. As an application developer you need not worry about this stuff, but yes! if you are a core developer who works in Linux kernel, Binutils, compiler or embedded system-related development, then you must know these things. Here in &amp;ldquo;CRT: C run time before starting main&amp;rdquo;, we will see some pointers related to it.
What Is crt? crt stands for C runtime.</description>
    </item>
    <item>
      <title>Dealing with Multiple file descriptor : poll() system call</title>
      <link>https://vishalchovatiya.github.io/posts/dealing-with-multiple-file-descriptor-poll-system-call/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/dealing-with-multiple-file-descriptor-poll-system-call/</guid>
      <description>Why use poll()? Suppose you have to deal with multiple clients connected at the same time. A natural question, then, is: how can you read from multiple file descriptors (sockets) at once? Do you need to make some really annoyingly multi-threaded code to handle each client that&amp;rsquo;s connected? Do you have to go into some stupid loop constantly checking each socket to see if data&amp;rsquo;s available? You can resolve this issue efficiently by polling file descriptor(Sockets here).</description>
    </item>
    <item>
      <title>Error Handling : setjmp &amp; longjmp</title>
      <link>https://vishalchovatiya.github.io/posts/error-handling-setjmp-longjmp/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/error-handling-setjmp-longjmp/</guid>
      <description>Points To Catch As for the control flow: setjmp returns twice, and longjmp never returns. When you call setjmp for the first time, to store the environment, it returns zero, And then when you call longjmp, the control flow passes to return from setjmp with the value provided in the argument. Use cases are generally cited as &amp;ldquo;error handling&amp;rdquo;, and &amp;ldquo;don&amp;rsquo;t use these functions&amp;rdquo;. Note: setjmp needn&amp;rsquo;t actually be functions; it may well be a macro.</description>
    </item>
    <item>
      <title>Execute Threads Parallelly at Given Time: pthread_barrier_t</title>
      <link>https://vishalchovatiya.github.io/posts/execute-threads-parallelly-at-given-time-pthread_barrier_t/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/execute-threads-parallelly-at-given-time-pthread_barrier_t/</guid>
      <description>Why we need pthread_barrier_t? When multiple threads are working together, it might be required that the threads wait for each other at a certain event or point in the program before proceeding ahead. Let us say we have four threads, each of which is going to initialize a global variable. The 4 variables, in turn, might be used by all the four threads. Thus it would be feasible that all the threads wait for each other to finish the initialization of the variables before proceeding.</description>
    </item>
    <item>
      <title>Semaphore between processes example in C</title>
      <link>https://vishalchovatiya.github.io/posts/semaphore-between-processes-example-in-c/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/semaphore-between-processes-example-in-c/</guid>
      <description>Semaphore is a synchronization mechanism. In more words, semaphores are a technique for coordinating or synchronizing activities in which multiple processes compete for the same resources. There are 2 types of semaphores: Binary semaphores &amp;amp; Counting semaphores. Binary Semaphores: Only two states 0 &amp;amp; 1, i.e., locked/unlocked or available/unavailable, Mutex implementation. Counting Semaphores: Semaphores which allow arbitrary resource count called counting semaphores. Here, we will see the POSIX style semaphore. POSIX semaphore calls are much simpler than the System V semaphore calls.</description>
    </item>
    <item>
      <title>Shared Memory IPC</title>
      <link>https://vishalchovatiya.github.io/posts/shared-memory-ipc/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/shared-memory-ipc/</guid>
      <description>Brief As the name suggests, shared memory is a memory that may be shared by multiple programs with an intent to provide communication among them or avoid redundant copies. Points To Catch shmget() Creates a shared memory segment, The key argument could be semaphore ID shmat(): Shared segment can be attached to a process address space using this API It can be detached using shmdt(), A shared segment can be attached multiple times by the same process The original owner of a shared memory segment can assign ownership to another user with `shmctl() List out shared memory areas by ipcs -m Get more info on the particular shared memory area ipcs -m -i [shmid] Remove shared memory ipcrm shm [shmid] Server.</description>
    </item>
    <item>
      <title>Signal Handling</title>
      <link>https://vishalchovatiya.github.io/posts/signal-handling/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/signal-handling/</guid>
      <description>Points To Catch
Signals = software interrupts. The command kill -l on the bash would give us the following. 1 2 3 4 5 6 7 8 9 10 11 12 13 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM 16) SIGSTKFLT 17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP 21) SIGTTIN 22) SIGTTOU 23) SIGURG 24) SIGXCPU 25) SIGXFSZ 26) SIGVTALRM 27) SIGPROF 28) SIGWINCH 29) SIGIO 30) SIGPWR 31) SIGSYS 34) SIGRTMIN 35) SIGRTMIN+1 36) SIGRTMIN+2 37) SIGRTMIN+3 38) SIGRTMIN+4 39) SIGRTMIN+5 40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+8 43) SIGRTMIN+9 44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9 56) SIGRTMAX-8 57) SIGRTMAX-7 58) SIGRTMAX-6 59) SIGRTMAX-5 60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-2 63) SIGRTMAX-1 64) SIGRTMAX Signals are also delivered to a process with the help of kill command.</description>
    </item>
    <item>
      <title>Socket Programming</title>
      <link>https://vishalchovatiya.github.io/posts/socket-programming/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/socket-programming/</guid>
      <description>Points To Catch On a single system, Two processes can communicate through Pipes Message queues Shared memory To communicate between two processes over a network, you need Socket Socket = Endpoint of communication between two systems on a network OR Combination of IP &amp;amp; Port Number Server Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include &amp;lt;sys/socket.</description>
    </item>
    <item>
      <title>Thread Conditional Wait with Mutex : pthread_cond_t</title>
      <link>https://vishalchovatiya.github.io/posts/thread-conditional-wait-with-mutex-pthread_cond_t/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/thread-conditional-wait-with-mutex-pthread_cond_t/</guid>
      <description>Brief Condition variables provide yet another way for threads to synchronize. While mutexes implement synchronization by controlling thread access to data, condition variables allow threads to synchronize based upon the actual value of data. Without condition variables, the programmer would need to have threads continually polling (possibly in a critical section), to check if the condition is met. This can be very resource consuming since the thread would be continuously busy in this activity.</description>
    </item>
    <item>
      <title>Understand ELF file format</title>
      <link>https://vishalchovatiya.github.io/posts/understand-elf-file-format/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/understand-elf-file-format/</guid>
      <description>ELF is the file format used for object files (.os), binaries, shared libraries and core dumps in Linux. ELF has the same layout for all architectures, however endianness and word size can differ; relocation types, symbol types and the like may have platform-specific values, and of course, the contained code is arch-specific. An ELF file provides 2 views on the data it contains: A linking view and an execution view.</description>
    </item>
    <item>
      <title>Unix Domain Socket</title>
      <link>https://vishalchovatiya.github.io/posts/unix-domain-socket/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      <guid>https://vishalchovatiya.github.io/posts/unix-domain-socket/</guid>
      <description>Brief A Unix domain socket or IPC socket is a data communications endpoint for exchanging data between processes executing on the same host operating system. The API for Unix domain sockets is similar to that of an Internet socket, but rather than using an underlying network protocol, all communication occurs entirely within the operating system kernel. Unix domain sockets use the file system as their address namespace. Processes reference Unix domain sockets as file system inodes, so two processes can communicate by opening the same socket.</description>
    </item>
  </channel>
</rss>
