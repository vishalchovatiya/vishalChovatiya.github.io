<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Reusable_blocks on Vishal Chovatiya</title>
    <link>http://localhost:1313/reusable_block/</link>
    <description>Recent content in Reusable_blocks on Vishal Chovatiya</description>
    <image>
      <title>Vishal Chovatiya</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.128.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 06 Apr 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/reusable_block/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SOLID Design Principles</title>
      <link>http://localhost:1313/reusable_block/solid-design-principles/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/reusable_block/solid-design-principles/</guid>
      <description> SRP – Single Responsibility Principle OCP – Open/Closed Principle LSP – Liskov Substitution Principle ISP – Interface Segregation Principle DIP – Dependency Inversion Principle </description>
    </item>
    <item>
      <title>Creational design patterns</title>
      <link>http://localhost:1313/reusable_block/creational-design-patterns/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/reusable_block/creational-design-patterns/</guid>
      <description> Factory Builder Prototype Singleton </description>
    </item>
    <item>
      <title>Behavioural Design Patterns</title>
      <link>http://localhost:1313/reusable_block/behavioural-design-patterns/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/reusable_block/behavioural-design-patterns/</guid>
      <description> Chain of responsibility Command Interpreter Iterator Mediator Memento Observer State Strategy Template Method Visitor </description>
    </item>
    <item>
      <title>Design Pattern : Prerequisites</title>
      <link>http://localhost:1313/reusable_block/design-pattern-prerequisites/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/reusable_block/design-pattern-prerequisites/</guid>
      <description>The code snippets you see throughout this series of articles are simplified not sophisticated. So you often see me not using keywords like override, final, public(while inheritance) just to make code compact &amp;amp; consumable(most of the time) in single standard screen size. I also prefer struct instead of class just to save line by not writing &amp;ldquo;public:&amp;rdquo; sometimes and also miss virtual destructor, constructor, copy constructor, prefix std::, deleting dynamic memory, intentionally.</description>
    </item>
    <item>
      <title>Structural Design Patterns</title>
      <link>http://localhost:1313/reusable_block/structural-design-patterns/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/reusable_block/structural-design-patterns/</guid>
      <description> Adapter Bridge Composite Decorator Facade Flyweight Proxy </description>
    </item>
  </channel>
</rss>
